public class MyTreeTest {
    public static class Tree {
        public static class Node {
            int value;
            Node left,right;

            Node(int value){
                this.value=value;
                left=null;
                right=null;
            }
        }
        public void insert(Node node, int value){
            if(value<node.value){
                if(node.left!=null){

                    insert(node.left,value);
                }else{
                    System.out.println("Insert: "+value+"to the left of "+node.value);
                    node.left=new Node(value);
                }
            } else if (value > node.value) {
                if(node.right!=null){
                    insert(node.right,value);
                }else{
                    System.out.println("Insert: "+value+"to the left of "+node.value);
                    node.right=new Node(value);
                }
            }
        }
        public void traverseInOrder(Node node){
            if(node!=null){
                traverseInOrder(node.left);
                System.out.println(node.value);
                traverseInOrder(node.right);
            }
        }
        public void traversePreOrder(Node node){
            if(node!=null){
                System.out.println("value: "+node.value);
                traverseInOrder(node.left);
                traverseInOrder(node.right);
            }
        }
        public void traversePostOrder(Node node){
            if(node!=null){
                traverseInOrder(node.left);
                traverseInOrder(node.right);
                System.out.println("value: "+node.value);
            }
        }
    }
    public static void main(String[] args){
        Tree tree = new Tree();
        Tree.Node root = new Tree.Node(5);
        System.out.println("Binary Tree Example");
        tree.insert(root,2);
        tree.insert(root,4);
        tree.insert(root,8);
        tree.insert(root,1);
        tree.insert(root,7);
        System.out.println("Traverse the Tree");
        tree.traverseInOrder(root);
        System.out.println("Traverse the PreOrder");
        tree.traversePreOrder(root);
        System.out.println("Traverse the PostOrder");
        tree.traversePostOrder(root);
    }
}
